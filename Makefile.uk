# SPDX-License-Identifier: BSD-3-Clause
#
# libc-test Unikraft library
#
# Authors: Florin Postolache <florin.postolache80@gmail.com>
#
# Copyright (c) 2022, Florin Postolache <florin.postolache80@gmail.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

################################################################################
# Library registration
################################################################################
$(eval $(call addlib_s,liblibctest,$(CONFIG_LIBLIBCTEST)))

################################################################################
# Sources
################################################################################]
LIBLIBCTEST_PATCHDIR = $(LIBLIBCTEST_BASE)/patches
LIBLIBCTEST_URL = https://github.com/bytecodealliance/libc-test.git
LIBLIBCTEST_BRANCH = master

$(eval $(call clone,liblibctest,$(LIBLIBCTEST_URL),$(LIBLIBCTEST_BRANCH)))
$(eval $(call patch,liblibctest,$(LIBLIBCTEST_PATCHDIR)))

################################################################################
# Helpers
################################################################################
LIBLIBCTEST_EXTRACTED = $(LIBLIBCTEST_ORIGIN)/src

################################################################################
# Library includes
################################################################################
LIBLIBCTEST_COMMON_INCLUDES-y += -I$(LIBLIBCTEST_EXTRACTED)/common
LIBLIBCTEST_COMMON_INCLUDES-y += -I$(LIBLIBCTEST_BASE)/include/
LIBLIBCTEST_CINCLUDES-y   += $(LIBLIBCTEST_COMMON_INCLUDES-y)
LIBLIBCTEST_CXXINCLUDES-y += $(LIBLIBCTEST_COMMON_INCLUDES-y)

################################################################################
# Flags
################################################################################

# Suppress some warnings to make the build process look neater
LIBLIBCTEST_FLAGS_SUPPRESS =

################################################################################
# Library sources
################################################################################
LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_BASE)/include/main.c

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_FILE_FOLDER_TESTS) $(CONFIG_LIBLIBCTEST_TIME_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_BASE)/create_fs_for_tests.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_ACCESS_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_BASE)/access_test.c
	endif
endif

ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_STRING_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/string_memcpy.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/string_strchr.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/string_strcspn.c
	ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/string_strstr.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/snprintf.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/basename.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/memmem-oob.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/memmem-oob-read.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/dirname.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/fnmatch.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/mbsrtowcs-overflow.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/wcsstr.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/string_memmem.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/string.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/iswspace-null.c
	endif
endif

LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/common/setrlim.c

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_MALLOC_TESTS) $(CONFIG_LIBLIBCTEST_FILE_FOLDER_TESTS) $(CONFIG_LIBLIBCTEST_ENV_TESTS) $(CONFIG_LIBLIBCTEST_PTHREAD_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/common/setrlim.c
	endif
endif

ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_MALLOC_TESTS) $(CONFIG_LIBLIBCTEST_PTHREAD_TESTS) $(CONFIG_LIBLIBCTEST_ENV_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/common/memfill.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/common/vmfill.c
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_PTHREAD_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/pthread_cancel-sem_wait.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/pthread_cond_wait-cancel_ignored.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/pthread_exit-cancel.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/pthread_rwlock-ebusy.c
		#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/pthread_create-oom.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/pthread_condattr_setclock.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/pthread_robust.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/pthread_tsd.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/pthread_cancel-points.c
		#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/pthread_cancel.c
		#wait not implemented will run forever
		#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/pthread_cond.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/tls_init.c
	endif
endif

ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_ENV_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
	#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/setenv-oom.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/putenv-doublefree.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/env.c
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_CONVERSION_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/wcstol.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/strtod_simple.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/strtod.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/strtof.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/strtold.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/strtod_long.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/strtol.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_REGEX_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/regex-backref-0.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/regex-bracket-icase.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/regex-ere-backref.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/regex-escaped-high-byte.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/regex-negated-range.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/regexec-nosub.c
	endif
endif

ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_FILE_FOLDER_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/printf-1e9-oob.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/printf-fmt-g-round.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/printf-fmt-g-zeros.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/scanf-nullbyte-char.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/scanf-bytes-consumed.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/scanf-match-literal-eof.c
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/sscanf.c
	ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/rewind-clear-error.c
		#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/rlimit-open-files.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/fgets-eof.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/common/utf8.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/printf-fmt-n.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/swprintf.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/fgetwc-buffering.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/sscanf_long.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/memstream.c
		ifneq ($(filter y,$(CONFIG_LIBVFSCORE_AUTOMOUNT_ROOTFS)),)
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/fcntl.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/fscanf.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/fwscanf.c
			##Fgetc waits forever to read bytes from file
			##LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/ungetc.c
			#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/setvbuf-unget.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/lseek-large.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/fdopen.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/mkdtemp-failure.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/mkstemp-failure.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/stat.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/ftello-unflushed-append.c
			#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/flockfile-list.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/getpwnam_r-crash.c
			LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/getpwnam_r-errno.c
		endif
	endif
endif

ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_TIME_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/clock_gettime.c
	ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/time.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/strptime.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/strftime.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/utime.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_NETWORK_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/inet_pton.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/inet_ntop-v4mapped.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/inet_pton-empty-last-field.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/socket.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/dn_expand-empty.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/dn_expand-ptr-0.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_RANDOM_TESTS) $(CONFIG_LIBLIBCTEST_SORT_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/common/rand.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_SORT_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/qsort.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_RANDOM_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/random.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/lrand48-signextend.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_STRUCTURE_SEARCH_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/search_hsearch.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/search_tsearch.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/search_lsearch.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/search_insque.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_SEMAPHORE_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/sem_init.c
		#Will return null structure of semaphore because link isn't implemented
		#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/sem_open.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_CRYPT_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/crypt.c
	endif
endif

ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_MALLOC_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/malloc-0.c
	#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/malloc-oom.c
	#LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/malloc-brk-fail.c
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_TGMATH_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/tgmath.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_ICONV_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/iconv-roundtrips.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/iconv_open.c
	endif
endif

ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_UDIV_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
	LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/udiv.c
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_MBFUNC_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/mbc.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_SETJMP_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/sigprocmask-internal.c
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/setjmp.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_FPCLASSIFY_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/regression/fpclassify-invalid-ld80.c
	endif
endif

ifeq ($(filter y,$(CONFIG_LIBNOLIBC)),)
	ifneq ($(filter y,$(CONFIG_LIBLIBCTEST_POSIX_SPAWN_TESTS) $(CONFIG_LIBUKTEST_ALL)),)
		LIBLIBCTEST_SRCS-y += $(LIBLIBCTEST_EXTRACTED)/functional/spawn.c
	endif
endif
